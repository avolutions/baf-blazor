@using Avolutions.Baf.Blazor.Account.Validators
@using Avolutions.Baf.Blazor.Forms.Helpers
@using Avolutions.Baf.Blazor.Inputs.Components
@using Avolutions.Baf.Core.Identity.Models
@using Avolutions.Baf.Core.Identity.Resources
@using Avolutions.Baf.Core.Identity.Services
@using Avolutions.Baf.Core.Resources
@using Microsoft.Extensions.Localization
@using MudBlazor
@using NetzwerkStein.Features.Framework.UserManagement.Models.Forms
@using Severity = MudBlazor.Severity

@inject UserService UserService
@inject ChangePasswordValidator Validator
@inject IStringLocalizer<IdentityResources> L
@inject IStringLocalizer<SharedResources> LShared

<MudDialog ContentStyle="width: 500px">
    <DialogContent>
        <MudForm Model="Model" @ref="@_form" Validation="@FluentValidatorHelper.CreateValidateValue(Validator)">

            <PasswordField @bind-Value="Model.Password"
                           For="@(() => Model.Password)"
                           Label="@L["Field.Password"]"
                           Required="true"
                           Immediate="true"
                           Variant="Variant.Outlined"/>

            <PasswordField @bind-Value="Model.PasswordConfirm"
                           For="@(() => Model.PasswordConfirm)"
                           Label="@L["Field.PasswordConfirm"]"
                           Required="true"
                           Immediate="true"
                           Variant="Variant.Outlined"/>
        </MudForm>
        @if (_errors.Count > 0)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="mt-2">
                @foreach (var error in _errors)
                {
                    <div>@error</div>
                }
            </MudAlert>
        }
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Default" OnClick="@Cancel">@LShared["Button.Cancel"]</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@Save">@LShared["Button.Save"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public User User { get; set; } = null!;
    
    private ChangePasswordForm Model { get; set; } = new();
    private MudForm _form = null!;

    private readonly List<string> _errors = new();
    
    private async Task Save()
    { 
        _errors.Clear();
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                await UserService.ResetPasswordAsync(User, Model.Password);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                _errors.AddRange(ex.Message.Split(Environment.NewLine));
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}