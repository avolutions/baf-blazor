@page "/Account/Login"

@layout LoginLayout

@attribute [ExcludeFromInteractiveRouting]

@using System.ComponentModel.DataAnnotations
@using Avolutions.Baf.Blazor.Layouts
@using Avolutions.BAF.Core.Identity.Models
@using Avolutions.Baf.Core.Identity.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using MudBlazor.StaticInput

@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Log in</PageTitle>

<MudGrid Style="height: 100vh;" Justify="Justify.Center" Class="d-flex align-center">
    <MudItem xs="12" sm="8" md="6" lg="5">
        <MudCard Class="pa-6" Elevation="5">
            <MudCardContent>
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator/>
                    <MudGrid>
                        @if (_errorMessage != null)
                        {
                            <MudAlert Variant="Variant.Outlined"
                                      Severity="Severity.Error">@_errorMessage
                            </MudAlert>
                        }
                        <MudItem xs="12">
                            <MudStaticTextField @bind-Value="Input.Username"
                                          For="@(() => Input.Username)"
                                          Label="Username"
                                          Variant="Variant.Outlined"
                                          UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudStaticTextField @bind-Value="Input.Password"
                                          For="@(() => Input.Password)" 
                                          Label="Password"
                                          InputType="InputType.Password"
                                          Variant="Variant.Outlined"
                                          UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudStaticButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       FullWidth="true"
                                       FormAction="FormAction.Submit">Log in</MudStaticButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }
    
    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            _errorMessage = "Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
