@typeparam T

@using Avolutions.Baf.Blazor.Forms.Helpers
@using Avolutions.Baf.Blazor.Forms.Resources
@using Avolutions.Baf.Blazor.Forms.Services
@using Avolutions.Baf.Core.Entity.Exceptions
@using Avolutions.Baf.Core.Resources
@using Avolutions.Baf.Core.Settings.Models
@using FluentValidation
@using KellermanSoftware.CompareNetObjects
@using Mapster
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Localization
@using MudBlazor
@using Severity = MudBlazor.Severity

@inject IServiceProvider Services
@inject ConfirmLeaveDialogService ConfirmLeaveDialogService

@inject IStringLocalizer<FormResources> L
@inject IStringLocalizer<SharedResources> LShared

@if (!IsSubForm)
{
    <NavigationLock OnBeforeInternalNavigation="ConfirmLeaveAsync"/>
}

<MudForm Model="Model" @ref="@_form" Validation="@FluentValidatorHelper.CreateValidateValue(_validator)">
    @ChildContent(Model)

    @if (_errors.Count > 0)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="mt-2">
            <MudElement HtmlTag="div">
                <MudText>@L["ErrorWhileSaving"]</MudText>
                @foreach (var error in _errors)
                {
                    <MudText>@error</MudText>
                }
            </MudElement>
        </MudAlert>
    }

    @if (!IsSubForm && ShowButtons)
    {
        <MudStack Row Spacing="5" Class="mt-4" Justify="Justify.FlexEnd">
            <MudButton
                Color="Color.Default"
                OnClick="@Cancel"
                Variant="Variant.Filled">
                @LShared["Button.Cancel"]
            </MudButton>
            <MudButton
                Color="Color.Primary"
                OnClick="@(async () => await Submit())"
                Variant="Variant.Filled"
                Disabled="_isSubmitting">
                @LShared["Button.Save"]
            </MudButton>
        </MudStack>
    }
</MudForm>

@code {
    [Parameter, EditorRequired] public required T Model { get; set; }
    [Parameter, EditorRequired] public required RenderFragment<T> ChildContent { get; set; } = null!;
    
    [Parameter] public IValidator<T>? Validator { get; set; }
    
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    [Parameter] public bool IsSubForm { get; set; }
    [Parameter] public bool ShowButtons { get; set; } = true;
    
    private IValidator<T>? _validator;
    private MudForm _form = null!;
    private readonly List<string> _errors = [];
    private bool _canNavigate;
    private bool _isSubmitting;
    private T? OriginalModel { get; set; }
    private readonly CompareLogic _comparer = new();
    
    protected override void OnParametersSet()
    {
        _validator = Validator ?? Services.GetService(typeof(IValidator<T>)) as IValidator<T>;
    }
    
    protected override Task OnInitializedAsync()
    {
        var config = new TypeAdapterConfig();

        config.Default
            .PreserveReference(true)
            .IgnoreNullValues(true);
        
        OriginalModel = Model.Adapt<T>(config);
        return Task.CompletedTask;
    }

    public bool IsValid()
    {
        return _form.IsValid;
    }

    public async Task<bool> ValidateAsync()
    {
        await _form.Validate();
        return IsValid();
    }
    
    public async Task Submit()
    {
        _isSubmitting = true;
        _errors.Clear();
        
        if (await ValidateAsync() && OnSubmit.HasDelegate)
        {
            try
            {
                _canNavigate = true;
                await OnSubmit.InvokeAsync();
            }
            catch (EntityValidationException ex)
            {
                foreach (var failure in ex.Failures)
                {
                    _errors.Add(failure.ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                _errors.AddRange(ex.Message.Split(Environment.NewLine));
            }
        }
        
        _isSubmitting = false;
    }

    private async Task Cancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
    
    private async Task<bool> ConfirmLeaveAsync(LocationChangingContext context)
    {
        if (_canNavigate)
        {
            return true;
        }
        
        var compareResult = _comparer.Compare(OriginalModel, Model);
        if (compareResult.AreEqual)
        {
            return true;
        }

        var result = await ConfirmLeaveDialogService.ShowAsync();
        if (result != null && !result.Canceled)
        {
            return true;
        }

        context.PreventNavigation();
        return false;
    }
}