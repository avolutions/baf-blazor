@typeparam T

@using Avolutions.Baf.Core.Resources
@using Microsoft.Extensions.Localization
@using MudBlazor

@inject IStringLocalizer<SharedResources> L

<MudDialog ContentStyle="width: 500px">
    <DialogContent>
        <FormComponent T="T"
                       Model="Model"
                       @ref="_form"
                       ShowButtons="false">
            <DynamicComponent Type="FormComponentType" Parameters="_formParameters" />
        </FormComponent>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="@Cancel">@L["Button.Cancel"]</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@Save">@L["Button.Save"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter, EditorRequired] public required T Model { get; set; }
    [Parameter, EditorRequired] public required Type FormComponentType { get; set; }
    [Parameter, EditorRequired] public required DialogParameters? AdditionalParameters { get; set; }
    
    private FormComponent<T> _form = null!;
    private Dictionary<string, object?> _formParameters = new();

    protected override void OnParametersSet()
    {
        _formParameters = new Dictionary<string, object?>
        {
            ["Model"] = Model
        };
        
        if (AdditionalParameters is not null)
        {
            foreach (var additionalParameter in AdditionalParameters)
            {
                _formParameters.Add(additionalParameter.Key, additionalParameter.Value);
            }
        }
    }
    
    private async Task Save()
    {
        await _form.ValidateAsync();
        if (_form.IsValid())
        {
            MudDialog.Close(DialogResult.Ok(Model));
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
}