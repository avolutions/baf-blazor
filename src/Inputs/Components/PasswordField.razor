@using System.Linq.Expressions
@using MudBlazor

<MudTextField
    T="string"
    Adornment="Adornment.End"
    AdornmentIcon="@_adornmentIcon"
    Class="@Class"
    For="@For"
    Immediate="@Immediate"
    InputType="@_inputType"
    Label="@Label"
    OnAdornmentClick="TogglePasswordVisibility"
    Required="@Required"
    Style="@Style"
    Value="@Value"
    ValueChanged="OnValueChanged"
    Variant="@Variant" />

@code {
    private bool _isPasswordVisible;
    private InputType _inputType = InputType.Password;
    private string _adornmentIcon = Icons.Material.Filled.VisibilityOff;

    [Parameter] public string? Label { get; set; } = "Password";
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public bool Immediate { get; set; } = false;
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }

    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    [Parameter] public Expression<Func<string>>? For { get; set; }

    private async Task OnValueChanged(string? newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }

    private Task TogglePasswordVisibility()
    {
        _isPasswordVisible = !_isPasswordVisible;
        _inputType = _isPasswordVisible ? InputType.Text : InputType.Password;
        _adornmentIcon = _isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        return Task.CompletedTask;
    }
}