@using System.Linq.Expressions
@using MudBlazor

<MudTextField
    T="decimal"
    Adornment="Adornment.End"
    AdornmentIcon="@Icons.Material.Filled.EuroSymbol"
    Class="Class"
    Disabled="@Disabled"
    For="@For"
    Format="F2"
    Immediate="@Immediate"
    Label="@Label"
    Required="@Required"
    Style="@Style"
    Value="Value"
    ValueChanged="OnValueChanged"
    Variant="@Variant" />

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public Expression<Func<decimal>>? For { get; set; }
    [Parameter] public bool Immediate { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public decimal Value { get; set; }
    [Parameter] public EventCallback<decimal> ValueChanged { get; set; }
    
    private async Task OnValueChanged(decimal value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }
}