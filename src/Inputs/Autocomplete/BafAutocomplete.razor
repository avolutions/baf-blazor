@typeparam T where T : IEntity
@attribute [CascadingTypeParameter(nameof(T))]

@using System.Linq.Expressions
@using Avolutions.Baf.Core.Entity.Abstractions
@using Avolutions.Baf.Core.Resources
@using Microsoft.Extensions.Localization
@using MudBlazor

@inject IAutocompleteProvider<T> AutocompleteProvider
@inject IStringLocalizer<SharedResources> LShared

<MudAutocomplete T="T"
                 Class="@Class"
                 Clearable="true"
                 Disabled="@Disabled"
                 For="@For"
                 Label="@Label"
                 SearchFunc="AutocompleteProvider.SearchAsync"
                 ResetValueOnEmptyText="true"
                 Required="@Required"
                 RequiredError="@(RequiredError ?? LShared["Validation.Required", Label ?? ""])"
                 Style="@Style"
                 ToStringFunc="AutocompleteProvider.ToString"
                 Value="Value"
                 ValueChanged="OnValueChanged"
                 Variant="@Variant"/>

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public Expression<Func<T>>? For { get; set; }
    [Parameter] public bool Immediate { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string? RequiredError { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public required T Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public Expression<Func<T>>? ValueExpression { get; set; }
    
    // extra callback for consumers
    [Parameter] public EventCallback<T?> OnChanged { get; set; }
    
    private async Task OnValueChanged(T value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
        await OnChanged.InvokeAsync(value);
    }
}