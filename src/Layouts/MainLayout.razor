@inherits LayoutComponentBase

@inject LoadingService LoadingService
@inject ISettings<ThemeSettings> ThemeSettings

<MudThemeProvider Theme="@_theme"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<NavigationLock />

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">
            ApplicationTitle
        </MudText>
        <MudSpacer />
        
        <MudSpacer />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu T="MainMenu"/>
    </MudDrawer>
    <MudMainContent>
        @if (LoadingService.IsLoading)
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
        }
        <MudContainer Fixed="true">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private MudTheme _theme = new();

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override void OnInitialized()
    {
        LoadingService.OnLoadingChanged += StateHasChanged;
        _theme = Theme.Create(ThemeSettings.Value);
    }
    
    public void Dispose()
    {
        LoadingService.OnLoadingChanged -= StateHasChanged;
    }
}