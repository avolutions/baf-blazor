@using System.Security.Claims
@using Avolutions.Baf.Blazor.Components.User
@using Avolutions.Baf.Core.Identity.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@inherits LayoutComponentBase

@inject LoadingService LoadingService
@inject ISettings<ThemeSettings> ThemeSettings
@inject UserManager<User> UserManager

<MudThemeProvider Theme="@_theme"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<NavigationLock />

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">
            ApplicationTitle
        </MudText>
        <MudSpacer />
            
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                @if (_userId != Guid.Empty)
                {
                    <UserAvatar UserId="_userId" Size="Size.Small" WithName="true"/>
                }
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken/>
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Logout"
                        ButtonType="ButtonType.Submit"
                        Color="Color.Inherit"
                        Class="ml-2"/>
                </form>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu T="MainMenu"/>
    </MudDrawer>
    <MudMainContent>
        @if (LoadingService.IsLoading)
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
        }
        <MudContainer Fixed="true">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private MudTheme _theme = new();
    private Guid _userId;

    [CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override async Task OnInitializedAsync()
    {
        LoadingService.OnLoadingChanged += StateHasChanged;
        _theme = Theme.Create(ThemeSettings.Value);
        
        var auth = await AuthTask;
        if (auth.User.Identity?.IsAuthenticated == true)
        {
            var claim = auth.User.FindFirst(ClaimTypes.NameIdentifier);
            if (claim is not null && Guid.TryParse(claim.Value, out var userId))
            {
                _userId = userId;
            }
           
        }
    }
    
    public void Dispose()
    {
        LoadingService.OnLoadingChanged -= StateHasChanged;
    }
}